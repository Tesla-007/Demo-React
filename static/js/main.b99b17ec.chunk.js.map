{"version":3,"sources":["hoc/withFormConnect.js","util/validators.js","component/public/auth.js","App.js","serviceWorker.js","index.js"],"names":["formConnect","WrappedComponent","state","formEl","connectState","setState","updateFormState","e","element","elValid","el","value","target","isCheckBox","type","checkData","hobbiesList","form","elements","hobbies","checkDataArr","forEach","hobby","checked","push","join","validators","validator","isElementValid","val","errMessage","errorMessage","updateState","updateFormValidity","REQUIREDPATTERN","data","validateForm","validity","valid","customValidators","key","errFunc","REQUIRED","MINLENGTH","length","formValid","jsonString","name","jsonData","JSON","parse","checkFormValidity","formsArray","stringify","split","i","this","Component","Validators","Map","values","err","set","CUSTOMVALIDATORS","PATTERN","FormsConnect","requiredAplhaNumeric","search","touched","email","EMAIL","city","password","gender","submitHandler","event","preventDefault","onElementChange","props","onSubmit","htmlFor","id","autoComplete","onChange","className","map","cityValue","cityKey","genderValue","genderKey","hobbyValue","hobbyKey","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b99b17ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst formConnect = (WrappedComponent) => {\r\n    return (\r\n        class extends Component {\r\n            state = {\r\n                formEl : null\r\n            }\r\n            connectState = (formEl) =>{\r\n                this.setState({\r\n                    formEl : formEl\r\n                })\r\n            }\r\n\r\n\r\n            updateFormState = (e, element) => {\r\n                let elValid = true;\r\n                const el = this.state.formEl[element];\r\n                const value = e.target.value;\r\n                const isCheckBox = ( el.type && el.type === \"checkbox\" ) ? true : false;\r\n                let checkData = \"\";\r\n                if( isCheckBox ) {\r\n                    const hobbiesList = e.target.form.elements.hobbies;\r\n                    const checkDataArr = [];\r\n                    hobbiesList.forEach( hobby => {\r\n                        if( hobby.checked === true )\r\n                            checkDataArr.push(hobby.value);\r\n                    })\r\n                    checkData = checkDataArr.join(\", \");\r\n                }\r\n                el.validators.forEach( validator => {\r\n                    if( this.isElementValid(isCheckBox, checkData, elValid, validator, value) )\r\n                    {\r\n                        const val = ( isCheckBox ) ? \"\" : value;\r\n                        const errMessage = validator.errorMessage;\r\n                        this.setState(this.updateState(val, el, errMessage), this.updateFormValidity)\r\n                        elValid = false;\r\n                    }\r\n        \r\n                    else if(  validator.REQUIREDPATTERN ){\r\n                        validator.REQUIREDPATTERN.forEach(( data, validateForm ) => {\r\n                            if( validateForm === \"EMAIL\" && !e.target.validity.valid)\r\n                                {\r\n                                    const errMessage = data.errorMessage;\r\n                                    this.setState(this.updateState(value, el, errMessage), this.updateFormValidity)\r\n                                    elValid = false;\r\n                                }\r\n                        })\r\n                    }\r\n                });\r\n\r\n                if( elValid && el.customValidators ){\r\n                    el.customValidators.forEach( ( data, key) => {\r\n                        const inValid = data.errFunc(value);\r\n                        if( inValid ) {\r\n                            const errMessage = data.errorMessage;\r\n                            this.setState(this.updateState(value, el, errMessage), this.updateFormValidity)\r\n                            elValid = false;\r\n                        }\r\n                    })\r\n                }\r\n                if( elValid )\r\n                {\r\n                    if( isCheckBox ) \r\n                        this.setState(this.updateState(checkData, el, \"\", true), this.updateFormValidity);\r\n                    else\r\n                        this.setState(this.updateState(value, el, \"\", true), this.updateFormValidity);\r\n                }     \r\n        }\r\n\r\n\r\n            isElementValid = (isCheckBox, checkData, elValid, validator, value ) => {\r\n                return (\r\n                    ( isCheckBox && checkData === \"\" ) ||\r\n                    ( !isCheckBox && elValid && validator.REQUIRED && value === \"\" ) ||\r\n                    ( !isCheckBox && elValid && validator.MINLENGTH && value.length < validator.MINLENGTH )\r\n                );\r\n            }\r\n\r\n            updateState = (value, element,errMessage=\"\", elValid=false, formValid = false) => {\r\n                const jsonString = '{\"'+ element.name +'\": { \"value\"   : \"' + value +'\", \"valid\"   : '+ elValid +', \"touched\" : '+ true +', \"errorMessage\"   : \"'+ errMessage +'\" } }';\r\n                const jsonData = JSON.parse(jsonString);\r\n                jsonData[element.name] = {\r\n                    ...element,\r\n                    ...jsonData[element.name]\r\n                };\r\n                return  {\r\n                        \"formEl\" : {\r\n                        ...this.state.formEl,\r\n                        \"valid\"   : formValid,\r\n                        \"touched\" : true,\r\n                        ...jsonData\r\n                    }\r\n                }\r\n            }\r\n            \r\n            \r\n            updateFormValidity = () => {\r\n                const formValid = this.checkFormValidity();\r\n                if(formValid !== this.state.formEl.valid){\r\n                    this.setState({\r\n                        \"formEl\" : {\r\n                            ...this.state.formEl,\r\n                            \"valid\"  : formValid\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        \r\n            checkFormValidity = () => {\r\n                let valid = true;\r\n                const formString = JSON.stringify(this.state.formEl);\r\n                const formsArray = formString.split('valid\":');\r\n                for (let i = 2; i < formsArray.length; i++) {\r\n                    if(formsArray[i].split(\",\")[0] !== \"true\")\r\n                        {\r\n                            valid = false;\r\n                            break;\r\n                        }\r\n                }\r\n                return valid;\r\n            }\r\n\r\n            render(){\r\n               return(\r\n                    <WrappedComponent formEl = { this.state.formEl } \r\n                                      updateFormState = { (e, element) => this.updateFormState(e,element) } \r\n                                      connectState = { (formEl) => this.connectState(formEl) }/>\r\n               );\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport default formConnect;","class Validators {\r\n    static #_required = { \"REQUIRED\" : true };\r\n    static #_minLength = null;\r\n    static #_requiredPattern = null;\r\n    static REQUIRED( errorMessage ) {\r\n        return { \r\n                  ...this.#_required,\r\n                  \"errorMessage\" : errorMessage\r\n               };\r\n    }\r\n    static MINLENGTH = ( value, errorMessage ) => {\r\n       this.#_minLength =  { \"MINLENGTH\" : value }; \r\n       return { \r\n                ...this.#_minLength,\r\n                \"errorMessage\" : errorMessage\r\n              };\r\n    }\r\n    static REQUIREDPATTERN( ...values ) {\r\n       const data = new Map();\r\n       values.forEach( value => {\r\n            const [ err, errorMessage ] = value;\r\n            data.set( err, { \"errorMessage\" : errorMessage} )\r\n       })\r\n       this.#_requiredPattern =  { \"REQUIREDPATTERN\" : data }; \r\n       return this.#_requiredPattern;\r\n    }\r\n    static CUSTOMVALIDATORS = ( ...values )  => {\r\n        const data = new Map();\r\n        values.forEach( value => {\r\n                const [ err, errFunc, errorMessage ] = value;\r\n                data.set( err, { \"errFunc\" : errFunc, \"errorMessage\" : errorMessage} )\r\n        })\r\n        return data;\r\n    }\r\n}\r\n\r\nclass PATTERN {\r\n    static get EMAIL() {\r\n        return \"EMAIL\";\r\n    }\r\n}\r\n\r\nexport { PATTERN };\r\nexport default Validators;","import React, { Component } from 'react';\r\nimport FormsConnect from '../../hoc/withFormConnect';\r\nimport  Validators, { PATTERN } from '../../util/validators';\r\nimport './auth.css';\r\n\r\nclass Auth extends Component {\r\n\r\n\r\n    requiredAplhaNumeric = (value = \"\") => {\r\n        return (value.search(\"@\") === -1);\r\n       }\r\n\r\n    formEl = {\r\n        name  : \"formEl\",\r\n        valid : false,\r\n        touched  : false,\r\n        email : {\r\n            name       : \"email\",\r\n            type       : \"email\",\r\n            valid      : false,\r\n            touched    : false,\r\n            value      : \"\",\r\n            errorMessage : \"\",\r\n            validators : [ \r\n                            Validators.REQUIRED(\"Email Required\") ,  \r\n                            Validators.REQUIREDPATTERN( [ PATTERN.EMAIL, \"Enter a valid email address\" ] ) \r\n                         ]\r\n        },\r\n        city     : {\r\n            name         : \"city\",\r\n            valid        : false,\r\n            touched      : false,\r\n            value        : \"\",\r\n            errorMessage : \"\",\r\n            data         : [[\"PLEASE SELECT A CITY\" , \"\"], [\"KOLKATA\", \"KOLKATA\"], [\"MUMBAI\", \"MUMBAI\"], [ \"BANGALORE\", \"BANGALORE\" ]],\r\n            validators   : [ Validators.REQUIRED(\"Select a City\") ]\r\n        },\r\n        password : {\r\n            name       : \"password\",\r\n            type       : \"password\",\r\n            valid      : false,\r\n            touched    : false,\r\n            value      : \"\",\r\n            errorMessage : \"\",\r\n            validators : [ \r\n                            Validators.REQUIRED(\"Password Required\"), \r\n                            Validators.MINLENGTH(6, \"Password must be of atleast 6 characters\" ) \r\n                        ],\r\n            customValidators : Validators.CUSTOMVALIDATORS( \r\n                                        [\"REQUIRED_ALPHA_NUMERIC\", this.requiredAplhaNumeric, \"Password need to contain alpha numeric characters\"]\r\n                                                        )\r\n        },\r\n        gender : {\r\n            name         : \"gender\",\r\n            type         : \"radio\",\r\n            valid        : false,\r\n            touched      : false,\r\n            value        : \"\",\r\n            errorMessage : \"\",\r\n            data         : [ [\"MALE\" , \"MALE\"], [\"FEMALE\", \"FEMALE\"], [\"OTHERS\", \"OTHERS\"] ],\r\n            validators   : [ Validators.REQUIRED(\"Select a Gender\") ]\r\n        },\r\n        hobbies : {\r\n            name         : \"hobbies\",\r\n            type         : \"checkbox\",\r\n            valid        : false,\r\n            touched      : false,\r\n            value        : \"\",\r\n            errorMessage : \"\",\r\n            data         : [ [\"CRICKET\" , \"CRICKET\"], [\"FOOTBALL\", \"FOOTBALL\"], [\"HOCKEY\", \"HOCKEY\"] ],\r\n            validators   : [ Validators.REQUIRED(\"Select atleast one hobby\") ]\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n\r\n                {\r\n                    (this.props.formEl) ? \r\n                        <form onSubmit = { this.submitHandler }>\r\n                            <label htmlFor = { this.props.formEl.email.name }>Name : </label>\r\n                            <input  type     = { this.props.formEl.email.type } \r\n                                    id       = \"email\"\r\n                                    name     = { this.props.formEl.email.name }\r\n                                    value    = { this.props.formEl.email.value }\r\n                                    autoComplete =  { this.props.formEl.email.name }\r\n                                    onChange = { (e) => this.onElementChange( e, this.props.formEl.email.name ) }/>\r\n                            <span className = { ( !this.props.formEl.email.valid && this.props.formEl.email.touched) ? \"text-danger\": \"text-hide\" }> *{ this.props.formEl.email.errorMessage } </span>\r\n                            <label htmlFor = { this.props.formEl.password.name }>Password : </label>\r\n                            <input  type     = { this.props.formEl.password.type } \r\n                                    id       = \"name\"\r\n                                    name     = { this.props.formEl.password.name }\r\n                                    value    = { this.props.formEl.password.value }\r\n                                    autoComplete =  { this.props.formEl.password.name }\r\n                                    onChange = { (e) => this.onElementChange( e, this.props.formEl.password.name ) }/>\r\n                            <span className = { ( !this.props.formEl.password.valid && this.props.formEl.password.touched) ? \"text-danger\": \"text-hide\" }> *{ this.props.formEl.password.errorMessage } </span>\r\n                            <label htmlFor = { this.props.formEl.city.name }>Select a City : </label>\r\n                            <select id       = \"city\"\r\n                                    name     = { this.props.formEl.city.name }\r\n                                    value    = { this.props.formEl.city.value }\r\n                                    autoComplete =  { this.props.formEl.city.name }\r\n                                    onChange = { (e) => this.onElementChange( e, this.props.formEl.city.name ) }>\r\n                                { \r\n                                    this.props.formEl.city.data.map( ([ cityValue , cityKey ]) =>  \r\n                                                                        <option key   = { cityKey } \r\n                                                                                value = { cityKey }>{ cityValue }</option>\r\n                                                                   ) \r\n                                }\r\n                            </select>\r\n                            <span className = { ( !this.props.formEl.city.valid && this.props.formEl.city.touched) ? \"text-danger\": \"text-hide\" }> *{ this.props.formEl.city.errorMessage } </span>\r\n\r\n                            <span id = \"genderLabel\">Select A Gender</span>\r\n                            <div className = \"radio-button\">\r\n                                { \r\n                                    this.props.formEl.gender.data.map( ([ genderValue , genderKey ]) =>  \r\n                                                                    <div key = { genderValue } className = \"radio-grp\">\r\n                                                                        <input type   = { this.props.formEl.gender.type } \r\n                                                                               id     = { genderKey }\r\n                                                                               name   = { this.props.formEl.gender.name }\r\n                                                                               value  = { genderKey } \r\n                                                                               onChange = { (e) => this.onElementChange( e, this.props.formEl.gender.name ) } />\r\n                                                                        <label htmlFor    = { this.props.formEl.gender.name }>\r\n                                                                                            { genderValue }\r\n                                                                        </label>   \r\n                                                                    </div>\r\n                                                                     ) \r\n                                }\r\n                                <span className = { ( !this.props.formEl.gender.valid && this.props.formEl.gender.touched) ? \"text-danger\": \"text-hide\" }> *{ this.props.formEl.gender.errorMessage } </span>\r\n                            </div>\r\n                            \r\n                            <span id = \"hobbiesLabel\">Select Your Hobbies</span>\r\n                            <div className = \"checkbox\">\r\n                                { \r\n                                    this.props.formEl.hobbies.data.map( ([ hobbyValue , hobbyKey ]) =>  \r\n                                                                    <div key = { hobbyValue } className = \"checkbox-grp\">\r\n                                                                        <input type   = { this.props.formEl.hobbies.type } \r\n                                                                               id     = { hobbyKey }\r\n                                                                               name   = { this.props.formEl.hobbies.name }\r\n                                                                               value  = { hobbyKey } \r\n                                                                               onChange = { (e) => this.onElementChange( e, this.props.formEl.hobbies.name ) } />\r\n                                                                        <label htmlFor  = { this.props.formEl.hobbies.name }>\r\n                                                                                            { hobbyValue }\r\n                                                                        </label>   \r\n                                                                    </div>\r\n                                                                     ) \r\n                                }\r\n                            </div>\r\n                            <span className = { ( !this.props.formEl.hobbies.valid && this.props.formEl.hobbies.touched) ? \"text-danger\": \"text-hide\" }> *{ this.props.formEl.hobbies.errorMessage } </span>\r\n\r\n\r\n                            <button type = \"submit\" disabled = { !this.props.formEl.valid } >SignUp</button>\r\n                        </form> :\r\n                        null\r\n                }\r\n\r\n                <div className = \"showDetails\">\r\n                    <fieldset>\r\n                        <legend>Features</legend>\r\n                        <p>Form elements validation decoupled from your logic</p>\r\n                        <p>Configuring \"form element validation\" made simple</p>\r\n                        <p>Have a look at the src file!!</p>\r\n                        <p>More details can be found in \"<span>readme.txt</span>\" attached with this project</p>\r\n                    </fieldset>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n       \r\n    }\r\n\r\n    onElementChange = ( e, element ) => {\r\n        this.props.updateFormState(e, element);\r\n    }\r\n\r\n    \r\n   \r\n\r\n    componentDidMount() {\r\n        this.props.connectState(this.formEl);\r\n    }\r\n   \r\n\r\n}\r\n\r\nexport default FormsConnect(Auth);","import React, { Component } from 'react';\nimport './App.css';\nimport Auth from './component/public/auth';\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n        <Auth />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}